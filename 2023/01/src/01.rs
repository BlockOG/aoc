use aoc::Input;

aoc::parts!(1, 2);

const TREE: [[u8; 26]; 25] = [
    [
        0, 0, 0, 0, 18, 8, 0, 0, 0, 0, 0, 0, 0, 22, 1, 0, 0, 0, 13, 3, 0, 0, 0, 0, 0, 0,
    ],
    [
        0, 0, 0, 0, 18, 8, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 13, 3, 0, 0, 0, 0, 0, 0,
    ],
    [
        0, 0, 0, 0, 18, 8, 0, 0, 23, 0, 0, 0, 0, 22, 1, 0, 0, 0, 13, 3, 0, 0, 0, 0, 0, 0,
    ],
    [
        0, 0, 0, 0, 18, 8, 0, 5, 0, 0, 0, 0, 0, 22, 1, 0, 0, 0, 13, 3, 0, 0, 4, 0, 0, 0,
    ],
    [
        0, 0, 0, 0, 18, 8, 0, 0, 0, 0, 0, 0, 0, 22, 1, 0, 0, 0, 13, 3, 0, 0, 0, 0, 0, 0,
    ],
    [
        0, 0, 0, 0, 18, 8, 0, 0, 0, 0, 0, 0, 0, 22, 1, 0, 0, 6, 13, 3, 0, 0, 0, 0, 0, 0,
    ],
    [
        0, 0, 0, 0, 7, 8, 0, 0, 0, 0, 0, 0, 0, 22, 1, 0, 0, 0, 13, 3, 0, 0, 0, 0, 0, 0,
    ],
    [
        0, 0, 0, 0, 18, 8, 0, 0, 19, 0, 0, 0, 0, 22, 1, 0, 0, 0, 13, 3, 0, 0, 0, 0, 0, 0,
    ],
    [
        0, 0, 0, 0, 18, 8, 0, 0, 11, 0, 0, 0, 0, 22, 9, 0, 0, 0, 13, 3, 0, 0, 0, 0, 0, 0,
    ],
    [
        0, 0, 0, 0, 18, 8, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 13, 3, 10, 0, 0, 0, 0, 0,
    ],
    [
        0, 0, 0, 0, 18, 8, 0, 0, 0, 0, 0, 0, 0, 22, 1, 0, 0, 0, 13, 3, 0, 0, 0, 0, 0, 0,
    ],
    [
        0, 0, 0, 0, 18, 8, 0, 0, 0, 0, 0, 0, 0, 22, 1, 0, 0, 0, 13, 3, 0, 12, 0, 0, 0, 0,
    ],
    [
        0, 0, 0, 0, 18, 8, 0, 0, 0, 0, 0, 0, 0, 22, 1, 0, 0, 0, 13, 3, 0, 0, 0, 0, 0, 0,
    ],
    [
        0, 0, 0, 0, 15, 8, 0, 0, 14, 0, 0, 0, 0, 22, 1, 0, 0, 0, 13, 3, 0, 0, 0, 0, 0, 0,
    ],
    [
        0, 0, 0, 0, 18, 8, 0, 0, 0, 0, 0, 0, 0, 22, 1, 0, 0, 0, 13, 3, 0, 0, 0, 0, 0, 0,
    ],
    [
        0, 0, 0, 0, 18, 8, 0, 0, 19, 0, 0, 0, 0, 22, 1, 0, 0, 0, 13, 3, 0, 16, 0, 0, 0, 0,
    ],
    [
        0, 0, 0, 0, 17, 8, 0, 0, 0, 0, 0, 0, 0, 22, 1, 0, 0, 0, 13, 3, 0, 0, 0, 0, 0, 0,
    ],
    [
        0, 0, 0, 0, 18, 8, 0, 0, 19, 0, 0, 0, 0, 22, 1, 0, 0, 0, 13, 3, 0, 0, 0, 0, 0, 0,
    ],
    [
        0, 0, 0, 0, 18, 8, 0, 0, 19, 0, 0, 0, 0, 22, 1, 0, 0, 0, 13, 3, 0, 0, 0, 0, 0, 0,
    ],
    [
        0, 0, 0, 0, 18, 8, 20, 0, 0, 0, 0, 0, 0, 22, 1, 0, 0, 0, 13, 3, 0, 0, 0, 0, 0, 0,
    ],
    [
        0, 0, 0, 0, 18, 8, 0, 21, 0, 0, 0, 0, 0, 22, 1, 0, 0, 0, 13, 3, 0, 0, 0, 0, 0, 0,
    ],
    [
        0, 0, 0, 0, 18, 8, 0, 0, 0, 0, 0, 0, 0, 22, 1, 0, 0, 0, 13, 3, 0, 0, 0, 0, 0, 0,
    ],
    [
        0, 0, 0, 0, 18, 8, 0, 0, 23, 0, 0, 0, 0, 22, 1, 0, 0, 0, 13, 3, 0, 0, 0, 0, 0, 0,
    ],
    [
        0, 0, 0, 0, 18, 8, 0, 0, 0, 0, 0, 0, 0, 24, 1, 0, 0, 0, 13, 3, 0, 0, 0, 0, 0, 0,
    ],
    [
        0, 0, 0, 0, 18, 8, 0, 0, 23, 0, 0, 0, 0, 22, 1, 0, 0, 0, 13, 3, 0, 0, 0, 0, 0, 0,
    ],
];

const RESULT: [u32; 25] = [
    0, 0, 1, 0, 2, 0, 0, 3, 0, 0, 4, 0, 5, 0, 6, 0, 0, 7, 0, 0, 0, 8, 0, 0, 9,
];

const LAST_CHECK: [u8; 25] = [
    0, 0, b'e', 0, b'o', 0, 0, b'e', 0, 0, b'r', 0, b'e', 0, b'x', 0, 0, b'n', 0, 0, 0, b't', 0, 0,
    b'e',
];

const TREE2: [[u8; 26]; 24] = [
    [
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 15, 3, 0, 0, 8, 0, 19, 0, 0, 0, 13, 0, 0,
    ],
    [
        0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 8, 0, 19, 0, 11, 0, 13, 0, 0,
    ],
    [
        0, 0, 0, 0, 16, 0, 0, 0, 23, 0, 0, 0, 0, 15, 3, 0, 0, 8, 0, 19, 0, 0, 0, 13, 0, 0,
    ],
    [
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 15, 3, 0, 0, 8, 0, 19, 0, 0, 4, 13, 0, 0,
    ],
    [
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 15, 3, 0, 0, 8, 0, 19, 0, 0, 0, 13, 0, 0,
    ],
    [
        0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 6, 0, 19, 0, 11, 0, 13, 0, 0,
    ],
    [
        0, 0, 0, 0, 1, 0, 0, 7, 0, 0, 0, 0, 0, 15, 3, 0, 0, 8, 0, 19, 9, 0, 0, 13, 0, 0,
    ],
    [
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 15, 3, 0, 0, 8, 0, 19, 0, 0, 0, 13, 0, 0,
    ],
    [
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 15, 3, 0, 0, 8, 0, 19, 9, 0, 0, 13, 0, 0,
    ],
    [
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 15, 10, 0, 0, 8, 0, 19, 0, 0, 0, 13, 0, 0,
    ],
    [
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 15, 3, 0, 0, 8, 0, 19, 0, 0, 4, 13, 0, 0,
    ],
    [
        0, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 15, 3, 0, 0, 8, 0, 19, 0, 0, 0, 13, 0, 0,
    ],
    [
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 15, 3, 0, 0, 8, 0, 19, 0, 0, 0, 13, 0, 0,
    ],
    [
        0, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 0, 15, 3, 0, 0, 8, 0, 19, 0, 0, 0, 13, 0, 0,
    ],
    [
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 15, 3, 0, 0, 8, 0, 19, 0, 0, 0, 13, 0, 0,
    ],
    [
        0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 15, 3, 0, 0, 8, 0, 19, 0, 0, 0, 13, 0, 0,
    ],
    [
        0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 8, 0, 19, 0, 17, 0, 13, 0, 0,
    ],
    [
        0, 0, 0, 0, 18, 0, 0, 0, 12, 0, 0, 0, 0, 15, 3, 0, 0, 8, 0, 19, 0, 0, 0, 13, 0, 0,
    ],
    [
        0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 8, 0, 19, 0, 11, 0, 13, 0, 0,
    ],
    [
        0, 0, 0, 0, 1, 0, 0, 20, 0, 0, 0, 0, 0, 15, 3, 0, 0, 8, 0, 19, 0, 0, 0, 13, 0, 0,
    ],
    [
        0, 0, 0, 0, 1, 0, 21, 0, 0, 0, 0, 0, 0, 15, 3, 0, 0, 8, 0, 19, 0, 0, 0, 13, 0, 0,
    ],
    [
        0, 0, 0, 0, 1, 0, 0, 0, 22, 0, 0, 0, 0, 15, 3, 0, 0, 8, 0, 19, 0, 0, 0, 13, 0, 0,
    ],
    [
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 15, 3, 0, 0, 8, 0, 19, 0, 0, 0, 13, 0, 0,
    ],
    [
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 15, 3, 0, 0, 8, 0, 19, 0, 0, 0, 13, 0, 0,
    ],
];

const RESULT2: [u32; 24] = [
    0, 0, 1, 0, 2, 0, 0, 3, 0, 0, 4, 0, 5, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 9,
];

const LAST_CHECK2: [u8; 24] = [
    0, 0, b'o', 0, b't', 0, 0, b't', 0, 0, b'f', 0, b'f', 0, b's', 0, 0, 0, b's', 0, 0, 0, b'e',
    b'n',
];

fn part_1(input: Input) -> impl ToString {
    input
        .lines()
        .map(|s| {
            let mut first = 0;
            let mut last = 0;
            for i in s.bytes() {
                if i.is_ascii_digit() {
                    first = (i - b'0') as u32;
                    break;
                }
            }
            for i in s.bytes().rev() {
                if i.is_ascii_digit() {
                    last = (i - b'0') as u32;
                    break;
                }
            }
            first * 10 + last
        })
        .sum::<u32>()
}

fn part_2(input: Input) -> impl ToString {
    input
        .lines()
        .map(|s| {
            let mut first = 0;
            let mut last = 0;

            let mut c = 0;
            for i in s.bytes() {
                if i.is_ascii_digit() {
                    first = (i - b'0') as u32;
                    break;
                } else {
                    // if RESULT[c] != 0 {
                    if RESULT[c] != 0 && LAST_CHECK[c] == i {
                        first = RESULT[c];
                        break;
                    }
                    c = TREE[c][(i - b'a') as usize] as usize;
                }
            }

            let mut c = 0;
            for i in s.bytes().rev() {
                if i.is_ascii_digit() {
                    last = (i - b'0') as u32;
                    break;
                } else {
                    // if RESULT2[c] != 0 {
                    if RESULT2[c] != 0 && LAST_CHECK2[c] == i {
                        last = RESULT2[c];
                        break;
                    }
                    c = TREE2[c][(i - b'a') as usize] as usize;
                }
            }

            first * 10 + last
        })
        .sum::<u32>()
}
